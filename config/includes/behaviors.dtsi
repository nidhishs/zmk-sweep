/* Home-Row Mods */
ZMK_HOLD_TAP(hml,
    flavor="balanced";
    tapping-term-ms=<280>;
    quick-tap-ms=<175>;
    require-prior-idle-ms=<150>;
    bindings=<&kp>,<&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS_L THUMBS_R>;
    hold-trigger-on-release;
)

ZMK_HOLD_TAP(hmr,
    flavor="balanced";
    tapping-term-ms=<280>;
    quick-tap-ms=<175>;
    require-prior-idle-ms=<150>;
    bindings=<&kp>,<&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS_L THUMBS_R>;
    hold-trigger-on-release;
)
/* ------------- */

/* One-Shot Mods */
ZMK_STICKY_KEY(osm_sk,
    release-after-ms=<3000>;
    bindings=<&kp>;
    quick-release;
    lazy;
    ignore-modifiers;
)

ZMK_HOLD_TAP(osm,
    flavor="balanced";
    tapping-term-ms=<280>;
    bindings=<&kp>,<&osm_sk>;
    hold-while-undecided-linger;
)

#define OSM(keycode) &osm keycode keycode
/* ------------- */

/*
Window Swapper

Call this macro before using the &win_swap behavior to specify 
the position of the key that triggers the previous window.
*/
#define WIN_SWAP(ignored_key_positions) \
    ZMK_TRI_STATE(win_swap, \
        bindings=<&kt LGUI>,<&kp TAB>,<&kt LGUI>; \
        ignored-key-positions=<ignored_key_positions>; \
    )
/* ------------- */

/*
Tab Swapper

Call this macro before using the &tab_swap behavior to specify
the position of the key that triggers the previous tab.
*/
#define TAB_SWAP(ignored_key_positions) \
    ZMK_TRI_STATE(tab_swap, \
        bindings=<&kt LCTRL>,<&kp TAB>,<&kt LCTRL>; \
        ignored-key-positions=<ignored_key_positions>; \
    )
/* ------------- */

/* Auto Shift */
ZMK_HOLD_TAP(as,
    flavor="tap-preferred";
    tapping-term-ms=<180>;
    bindings=<&kp>,<&kp>;
)

#define AS_1(keycode) &as LS(keycode) keycode
#define AS_2(keycode1, keycode2) &as keycode1 keycode2
/* ------------- */

/* Jump Cusor */
// To end of next word
ZMK_MACRO(jump_nxt, bindings=<&macro_tap &kp LA(RIGHT)>;)
// To end of current word
ZMK_MACRO(jump_end, bindings=<&macro_tap &kp LA(LEFT) &kp LA(RIGHT)>;)
// To beg of next word
ZMK_MACRO(jump_prv, bindings=<&macro_tap &kp LA(LEFT)>;)
// To beg of current word
ZMK_MACRO(jump_bgn, bindings=<&macro_tap &kp LA(RIGHT) &kp LA(LEFT)>;)
/* ----------- */

/* Select Word */
// Jumps to the beginning of the current word and selects to the right of the cursor.
ZMK_MACRO(_sel_nxt, bindings=<&macro_tap &kp LS(LA(RIGHT))>;)
ZMK_TRI_STATE(sel_nxt, bindings=<&jump_bgn>,<&_sel_nxt>,<&none>;)

// Jump to the end of the current word and selects to the left of the cursor.
ZMK_MACRO(_sel_prv, bindings=<&macro_tap &kp LS(LA(LEFT))>;)
ZMK_TRI_STATE(sel_prv, bindings=<&jump_end>,<&_sel_prv>,<&none>;)
/* ----------- */

/* Screen Capture */
// Open screen-capture manager.
ZMK_MACRO(scr_cap, bindings=<&macro_tap &kp LG(LS(N5))>;)

// Capture selected area and copy to clipboard.
ZMK_MACRO(scr_shot, bindings=<&macro_tap &kp LG(LS(N4))>;)
/* ----------- */

/* Tap Dances */
ZMK_TAP_DANCE(num_dance, bindings=<&sl NUM>,<&num_word NUM>;)
ZMK_TAP_DANCE(sys_dance, bindings=<&sl SYS>,<&tog SYS>;)
ZMK_TAP_DANCE(copy_cut,  bindings=<&kp LG(C)>,<&kp LG(X)>;)
/* ------------- */

/*
Smart Mouse Layer

Call this macro before using the &mouse behavior to specify
the position of the key that triggers the mouse layer and positions that have mouse keys.
*/
#define MOUSE_LAYER(ignored_key_positions) \
    ZMK_TRI_STATE(mouse, \
        bindings=<&tog MOUSE>,<&none>,<&tog MOUSE>; \
        ignored-key-positions=<ignored_key_positions>; \
        ignored-layers=<MOUSE>; \
    )
/* ------------- */

/* Mouse Keys */
ZMK_MOD_MORPH(mous_up,
    bindings=<&mmv MOVE_UP>,<&msc MOVE_UP>;
    mods=<(MOD_LALT|MOD_RALT)>;
)
ZMK_MOD_MORPH(mous_dn,
    bindings=<&mmv MOVE_DOWN>,<&msc MOVE_DOWN>;
    mods=<(MOD_LALT|MOD_RALT)>;
)
ZMK_MOD_MORPH(mous_lt,
    bindings=<&mmv MOVE_LEFT>,<&msc MOVE_LEFT>;
    mods=<(MOD_LALT|MOD_RALT)>;
)
ZMK_MOD_MORPH(mous_rt,
    bindings=<&mmv MOVE_RIGHT>,<&msc MOVE_RIGHT>;
    mods=<(MOD_LALT|MOD_RALT)>;
)
/* ------------- */